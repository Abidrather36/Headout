# server.py
from flask import Flask, request, jsonify
import os

app = Flask(__name__)

@app.route('/data', methods=['GET'])
def get_data():
    file_name = request.args.get('n')
    line_number = request.args.get('m')

    if not file_name:
        return jsonify({"error": "File name (n) is required"}), 400

    file_path = f'/tmp/data/{file_name}.txt'

    if not os.path.exists(file_path):
        return jsonify({"error": "File not found"}), 404

    if line_number:
        try:
            with open(file_path, 'r') as file:
                lines = file.readlines()
                content = lines[int(line_number) - 1]
            return jsonify({"content": content.strip()})
        except IndexError:
            return jsonify({"error": "Line number (m) is out of range"}), 400
    else:
        with open(file_path, 'r') as file:
            content = file.read()
        return jsonify({"content": content.strip()})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)




2)Now, let's create a Dockerfile for the project: Optimized

# Dockerfile
FROM python:3.8-slim

# Install dependencies
RUN pip install Flask gunicorn

# Set working directory
WORKDIR /app

# Copy only necessary files
COPY server.py /app

# Create the data directory and copy data files
RUN mkdir -p /tmp/data
COPY data/*.txt /tmp/data/

EXPOSE 8080

# Specify the command to run your service
CMD ["gunicorn", "server:app", "--bind", "0.0.0.0:8080"]



3)  Make sure you have a requirements.txt file if there are any additional dependencies.

Build the Docker image using the following command:



docker build -t your-image-name .
To run the Docker container with the specified resource constraints, use:

bash
Copy code
docker run -p 8080:8080 --memory=1500m --cpus=2 your-image-name
